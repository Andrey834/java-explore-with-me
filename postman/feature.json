{
	"info": {
		"_postman_id": "b967408e-5580-4673-8a77-e5c61dc60986",
		"name": "Test Explore with me - feature_location_processing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26764281"
	},
	"item": [
		{
			"name": "location",
			"item": [
				{
					"name": "Add Admin Location № 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lat\": 55.769386,\r\n\t\"lon\": 37.59755,\r\n    \"radius\": 300\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location № 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/location/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin Location № 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lat\": 55.73167,\r\n    \"lon\": 37.50667,\r\n    \"radius\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локации должны содержать поля: description, lat, lon, radius\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('lat');\r",
									"    pm.expect(target[0]).to.have.property('lon');\r",
									"    pm.expect(target[0]).to.have.property('radius');\r",
									"    pm.expect(target[1]).to.have.property('id');\r",
									"    pm.expect(target[1]).to.have.property('lat');\r",
									"    pm.expect(target[1]).to.have.property('lon');\r",
									"    pm.expect(target[1]).to.have.property('radius');\r",
									"    pm.expect(target[2]).to.have.property('id');\r",
									"    pm.expect(target[2]).to.have.property('lat');\r",
									"    pm.expect(target[2]).to.have.property('lon');\r",
									"    pm.expect(target[2]).to.have.property('radius');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Admin Location(duplicate) FAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lat\": 55.769386,\r\n\t\"lon\": 37.59755,\r\n    \"radius\": 300\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location № 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lon\": 37.506532,\r\n    \"lat\": 55.731222,\r\n    \"radius\": 500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/location/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location № 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/location/110",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location",
								"110"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location № 1000 FAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/location/1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"location",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"sdsadsadasdasdgfdgfdgfdgdfgdfg\",\r\n    \"category\": 1,\r\n    \"description\": \"dsadsadsadsadasdsadadsadasd\",\r\n    \"eventDate\": \"2100-01-01 12:12:12\",\r\n    \"location\": {\r\n        \"lat\": 55.769386,\r\n        \"lon\": 37.59755,\r\n        \"radius\": 1000\r\n    },\r\n    \"paid\": \"true\",\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": \"true\",\r\n    \"title\": \"new fire show bit\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/106",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"106"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events with Location Public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?address=Москва Тверская 38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "address",
									"value": "Москва Тверская 38"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events with Location Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events?address=Москва Тверская 38",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "address",
									"value": "Москва Тверская 38"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment')",
							"",
							"let futureDate = pm.variables.replaceIn('{{$randomDateFuture}}')",
							"futureDate = moment(futureDate).format((\"YYYY-MM-DD HH:mm:ss\"))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://supero:8080"
		},
		{
			"key": "moment",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}